# name: Template App Deploy to AWS

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: <app-repo>
#   ECS_SERVICE: <app-ecs-service>
#   ECS_CLUSTER: <app-ecs-cluster>

# permissions:
#   contents: read

# jobs:
#   build:
#     name: "Build Template App"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 20

#       - name: Install
#         run: yarn

#       - name: Build template
#         run: yarn build

#   lint:
#     name: "Lint template"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 20

#       - name: Install
#         run: yarn

#       - name: Run template lint
#         run: |
#           yarn format-ci
#           yarn lint-ci

#   unit:
#     name: "Test template"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 20

#       - name: Install
#         run: yarn

#       - name: Test template
#         run: yarn test

#   deploy-infra:
#     name: Deploy Infrastructure
#     needs: [build, unit, lint]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.ID }}
#           aws-secret-access-key: ${{ secrets.KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Install dependencies
#         run: yarn

#       - name: Synth Stack
#         run: yarn cdk synth

#       - name: Deploy Staging Stack
#         run: yarn cdk deploy TemplateAppStack --require-approval never

#   deploy-code:
#     name: Push Code to ECR
#     needs: [build, unit, lint]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.ID }}
#         aws-secret-access-key: ${{ secrets.KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         COMMIT_SHA: ${{ github.sha }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA -f deploy.Dockerfile .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA  # pushed for safety - allows quick rollback in AWS
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

#   update-ecs:
#     name: Update ECS Cluster
#     needs: [deploy-infra, deploy-code]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Force new ECS deployment
#       run: |
#         aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
#         aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
